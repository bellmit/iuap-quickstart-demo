<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/rabbit
	http://www.springframework.org/schema/rabbit/spring-rabbit-1.4.xsd">
 
	<!-- 连接服务配置  -->
	<rabbit:connection-factory id="connectionFactory" addresses="${mq.addresses}"  username="${mq.username}" password="${mq.password}" publisher-confirms="false"/>
         
	<rabbit:admin connection-factory="connectionFactory"/>
    
	<!-- queue 队列声明-->
	<rabbit:queue id="simple_queue" durable="true" auto-delete="false" exclusive="false" name="simple_queue"/>
	
	<!-- exchange queue binging key 绑定，作为点对点模式使用 -->
	<rabbit:direct-exchange name="iuap-direct-exchange" durable="true" auto-delete="false" id="iuap-direct-exchange">
		<rabbit:bindings>
			<rabbit:binding queue="simple_queue" key="simple_queue_key"/>
		</rabbit:bindings>
	</rabbit:direct-exchange>
	
	<!-- 声明的订阅模型的queue -->
	<rabbit:queue id="iuap-publish-subscribe" durable="true" auto-delete="false" exclusive="false" name="iuap-publish-subscribe"/>
	<rabbit:queue id="iuap-publish-subscribe-another" durable="true" auto-delete="false" exclusive="false" name="iuap-publish-subscribe-another"/>
	
	<!-- fanout-exchange，作为发布-订阅模式使用。
		由于RabbitMQ的发布订阅模型是根据多个queue，多个消费者订阅实现的。此处声明的exchange不必预先绑定queue，
		在消费者声明queue并绑定到该exchange即可。
	 -->
	<rabbit:fanout-exchange name="iuap-fanout-exchange" durable="true" auto-delete="false" id="iuap-fanout-exchange">
        <rabbit:bindings>
            <rabbit:binding queue="iuap-publish-subscribe"></rabbit:binding>
            <rabbit:binding queue="iuap-publish-subscribe-another"></rabbit:binding>
        </rabbit:bindings>
	</rabbit:fanout-exchange>	
	
	<!-- 主题订阅 -->
	<rabbit:topic-exchange name="iuap-topic-exchange" durable="true" auto-delete="false" id="iuap-topic-exchange">
        <rabbit:bindings>
            <rabbit:binding queue="iuap-publish-subscribe" pattern="iuap_qy.*"></rabbit:binding>
            <!-- 绑定键说明
            *可以匹配一个标识符。
			#可以匹配0个或多个标识符。
			当一个队列与绑定键#绑定，将会收到所有的消息，类似fanout类型转发器。
			当绑定键中不包含任何#与*时，类似direct类型转发器。
             -->
        </rabbit:bindings>
	</rabbit:topic-exchange>	
	
	<!-- 通用 template声明 -->
<!-- 	<rabbit:template id="rabbitTemplate"  retry-template="retryConnTemplate"  connection-factory="connectionFactory"  message-converter="jsonMessageConverter"/> -->
	<rabbit:template id="rabbitTemplate"  retry-template="retryConnTemplate"  connection-factory="connectionFactory"  message-converter="rabbitMessageConverter"/>
	
	<!-- 通用RabbitMQ producer声明 -->
	<bean id="rabbitMQProducer" class="com.yonyou.iuap.mq.rabbit.RabbitMQProducer">
		<property name="rabbitTemplate" ref="rabbitTemplate"></property>
	</bean>
	
	<!-- 增加失败重试机制，发送失败之后，会尝试重发三次，重发间隔(ms)为 
	    第一次 initialInterval 
	    此后：initialInterval*multiplier > maxInterval ? maxInterval : initialInterval*multiplier。
	    配合集群使用的时候，当mq集群中一个down掉之后，重试机制尝试其他可用的mq。
	 -->
	<bean id="retryConnTemplate" class="org.springframework.retry.support.RetryTemplate">
        <property name="backOffPolicy">
            <bean class="org.springframework.retry.backoff.ExponentialBackOffPolicy">
                <property name="initialInterval" value="500"/>
                <property name="multiplier" value="10.0"/>
                <property name="maxInterval" value="5000"/>
            </bean>
        </property>
    </bean>
</beans>